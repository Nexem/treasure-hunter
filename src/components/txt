<template>
 <div fluid class="fill-height" style="background-color: white; height: 100%">
  <v-row style="height: 100%" @keydown.enter="getOrderList()">
   <v-col cols="12" :md="getCols">
    <MenuBarElog />

    <v-row class="mx-5">
     <v-col>
      <v-row
       class="font-weight-bold accent--text"
       style="font-size: xx-large; max-width: fit-content"
      >
       <span>Create Purchase Order</span>
      </v-row>
     </v-col>
     <v-col>
      <v-row class="justify-end">
       <v-btn color="accent" @click="$router.go(-1)" x-large class="accent">
        Cancel
       </v-btn>
      </v-row>
     </v-col>
    </v-row>
    <v-divider class="mx-5"></v-divider>
    <v-row style="height: 90%" class="justify-center align-center">
     <div v-if="step == 1 || step == 2">
      <v-col class="fill-height">
       <v-row class="justify-center align-center mb-5">
        <span class="font-weight-bold" style="color: black; font-size: x-large">
         Click
         <a
          class="no-uppercase font-weight-bold accent--text"
          style="font-size: x-large"
          text
          :href="require('@/assets/PO ASN Template.xlsx')"
          download
         >
          here</a
         >
         to download template
        </span>
       </v-row>
       <v-row class="justify-center align-center">
        <v-card>
         <div
          class="flex w-full h-screen items-center justify-center text-center ma-5"
          id="app"
         >
          <div @dragover="dragover" @dragleave="dragleave" @drop="drop">
           <input
            type="file"
            name="fields[assetsFieldHandle][]"
            id="assetsFieldHandle"
            class="opacity-0 overflow-hidden"
            style="position: absolute"
            @change="onChange"
            ref="file"
            accept=".xlsx,.csv,"
           />

           <label for="assetsFieldHandle" class="block cursor-pointer">
            <v-icon x-large class="mb-3 accent--text">mdi-file-upload</v-icon>
            <div>
             Drop files here or browse to upload or click here to upload
            </div>
            <div>Allowed files : .XLSX, .CSV</div>
           </label>
           <ul class="mt-4" v-if="this.filelist.length" v-cloak>
            <li
             class="text-sm p-1"
             v-for="file in filelist"
             v-bind:key="file.name"
            >
             {{ file.name }}
             <v-btn
              class="ml-2"
              type="button"
              @click="remove(filelist.indexOf(file))"
              title="Remove file"
              icon
             >
              <v-icon>mdi-cancel</v-icon>
             </v-btn>
            </li>
           </ul>
          </div>
         </div>
        </v-card>
       </v-row>
       <v-row class="justify-end mt-10">
        <v-btn class="accent" @click="uploadFileCheck()">Upload</v-btn>
       </v-row>
       <v-row v-if="step == 2">
        <v-col>
         <v-divider class="mt-3"></v-divider>
         <v-row>
          <div
           class="accent--text mt-3 font-weight-bold"
           style="font-size: large"
          >
           Please fix below issue(s) in the file :
          </div>
         </v-row>
         <v-row>
          <div class="accent--text mt-3" style="font-size: medium">
           If you can't resolve the issue(s), please contact us at :
           <a class="no-uppercase accent--text" style="font-size: medium" text>
            help.elogistics@geodis.com</a
           >
          </div>
         </v-row>
         <v-row class="mt-5">
          <v-data-table
           :headers="fileCheckHeaders"
           :items="ordersToCorrect"
          ></v-data-table>
         </v-row>
        </v-col>
       </v-row>
      </v-col>
     </div>
     <div v-if="step == 3">
      <v-col>
       <v-row class="align-center mb-3">
        <v-icon x-large class="accent--text"> mdi-check-circle-outline </v-icon>
        <div
         class="accent--text font-weight-bold ml-5"
         style="font-size: x-large"
        >
         Purchase Order Successfully Placed
        </div>
       </v-row>
       <v-row>
        <v-col>
         <v-card>
          <div class="ma-3">
           Your purchase order has been placed. If you have any question about
           your order, you can contact us at
           <a
            class="mx-3"
            style="color: blue; text-decoration: underline"
            onclick="copyURL()"
           >
            help.elogistics@geodis.com
           </a>
          </div>
          <v-card-actions
           ><v-btn
            class="accent mt-5"
            medium
            style="text-transform: none"
            @click="$router.go(-1)"
            >Return to Inbounds</v-btn
           ></v-card-actions
          >
         </v-card>
        </v-col>
       </v-row>
      </v-col>
     </div>
    </v-row>
   </v-col>
  </v-row>
  <v-snackbar
   v-model="snackbar"
   v-if="snackbar"
   bottom
   color="warning"
   :timeout="timeout"
   class="mx-4"
  >
   <v-row align="center"
    ><v-avatar><v-icon>mdi-cancel</v-icon></v-avatar>
    <span class="pl-3"> Error : {{ errorMessage }} </span>
   </v-row>
  </v-snackbar>
 </div>
</template>

<script>
 import { SessionMixin } from "@/mixins/session.mixin";
 import MenuBarElog from "@/components/eLog/MenuBarElog";

 import * as am4core from "@amcharts/amcharts4/core";
 import am4themes_animated from "@amcharts/amcharts4/themes/animated";
 am4core.useTheme(am4themes_animated);

 import { createPurchaseOrderOMS } from "@/services/orders.service";

 export default {
  components: {
   MenuBarElog,
  },

  delimiters: ["${", "}"],

  data() {
   return {
    step: 1,
    filelist: [],

    uploadProgress: "",
    fileAdded: "",
    sendingFiles: "",

    timeout: 10000,
    errorMessage: "",
    snackbar: false,

    fileCheckHeaders: [
     { text: "Order ID", value: "orderID" },
     { text: "Field", value: "field" },
     { text: "Error", value: "error" },
    ],

    ordersToCorrect: [],
    url: "help.elogistics@geodis.com",
    customerName: sessionStorage.getItem("customerName"),
   };
  },

  mixins: [SessionMixin],

  computed: {
   getCols() {
    if (this.insight) return 9;
    else return 12;
   },
  },

  methods: {
   // async copyURL() {
   //   try {
   //     navigator.clipboard.writeText(this.url);
   //     this.$refs.url.focus();
   //     document.execCommand('copy');
   //     alert('Copied');
   //   } catch ($e) {
   //     alert('Cannot copy');
   //   }
   // },

   onChange() {
    const temp = this.$refs.file.files;
    for (const [key, file] of Object.entries(temp)) {
     const extension = file.name.split(".").pop();
     if (extension === "xlsx" || extension === "csv") {
      if (this.filelist.length === 0) {
       this.filelist = [file];
      } else {
       this.snackbar = true;
       this.errorMessage =
        " Please drop only one file, only the first one will be imported";
      }
     } else {
      this.snackbar = true;
      this.errorMessage =
       " Wrong file extension, please import .xlsx or .csv template file";
     }
    }
   },

   async uploadFileCheck() {
    if (this.filelist.length > 0) {
     const response = await createPurchaseOrderOMS(
      this.filelist[0],
      this.customerName
     );

     if (response && response.status && response.status == "202") {
      this.step = 3;
     } else {
      this.ordersToCorrect = [];
      const arrayErrors = response.data.message;
      for (const [key, errors] of Object.entries(arrayErrors)) {
       const orderId = errors.orderId;
       for (const [key, error] of Object.entries(errors.errorMessage)) {
        for (const [key, errorMessage] of Object.entries(error.errorMessage)) {
         this.ordersToCorrect.push({
          orderID: orderId,
          field: error.field,
          error: errorMessage,
         });
        }
       }
      }
      this.step = 2;
     }
    } else {
     this.step = 1;
    }
   },

   remove(i) {
    this.filelist.splice(i, 1);
    this.step = 1;
   },
   dragover(event) {
    event.preventDefault();
    if (!event.currentTarget.classList.contains("bg-green-300")) {
     event.currentTarget.classList.remove("bg-gray-100");
     event.currentTarget.classList.add("bg-green-300");
    }
   },
   dragleave(event) {
    // Clean up
    event.currentTarget.classList.add("bg-gray-100");
    event.currentTarget.classList.remove("bg-green-300");
   },
   drop(event) {
    event.preventDefault();
    this.$refs.file.files = event.dataTransfer.files;
    this.onChange(); // Trigger the onChange event manually
    // Clean up
    event.currentTarget.classList.add("bg-gray-100");
    event.currentTarget.classList.remove("bg-green-300");
   },
  },

  mounted() {},
 };
</script>

<style>
 .no-uppercase {
  text-transform: unset !important;
 }

 [v-cloak] {
  display: none;
 }
</style>
